<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lucifer的网络博客</title>
  
  <subtitle>LeetCode 前端</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://lucifer.ren/blog/"/>
  <updated>2020-08-09T03:25:22.406Z</updated>
  <id>https://lucifer.ren/blog/</id>
  
  <author>
    <name>lucifer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好未来-北京-视频面试</title>
    <link href="https://lucifer.ren/blog/2020/08/09/interview-log-haoweilai/"/>
    <id>https://lucifer.ren/blog/2020/08/09/interview-log-haoweilai/</id>
    <published>2020-08-09T02:46:33.410Z</published>
    <updated>2020-08-09T03:25:22.406Z</updated>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;作者：阿吉&lt;/li&gt;
&lt;li&gt;整理&amp;amp;点评：lucifer&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面经" scheme="https://lucifer.ren/blog/categories/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="校招" scheme="https://lucifer.ren/blog/categories/%E6%A0%A1%E6%8B%9B/"/>
    
      <category term="好未来" scheme="https://lucifer.ren/blog/categories/%E5%A5%BD%E6%9C%AA%E6%9D%A5/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面经" scheme="https://lucifer.ren/blog/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="校招" scheme="https://lucifer.ren/blog/tags/%E6%A0%A1%E6%8B%9B/"/>
    
      <category term="好未来" scheme="https://lucifer.ren/blog/tags/%E5%A5%BD%E6%9C%AA%E6%9D%A5/"/>
    
  </entry>
  
  <entry>
    <title>上帝视角看 TypeScript</title>
    <link href="https://lucifer.ren/blog/2020/08/04/ts-internal/"/>
    <id>https://lucifer.ren/blog/2020/08/04/ts-internal/</id>
    <published>2020-08-04T03:55:11.375Z</published>
    <updated>2020-08-04T03:55:47.660Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript 的学习资料非常多，其中也不乏很多优秀的文章和教程。但是目前为止没有一个我特别满意的。原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们大多数没有一个清晰的主线，而是按照 API 组织章节的，内容在&lt;strong&gt;逻辑上&lt;/strong&gt;比较零散。&lt;/li&gt;
&lt;li&gt;大多是“讲是什么，怎么用“，而不是”讲为什么，讲原理“。&lt;/li&gt;
&lt;li&gt;大多数内容比较枯燥，趣味性比较低。都是干巴巴的文字，没有图片，缺乏能够引起强烈共鸣的例子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我的想法是做一套不同市面上大多数的 TypeScript 学习教程。以人类认知的角度思考问题，学习 TypeScript，通过通俗易懂的例子和图片来帮助大家建立 TypeScript 世界观。 而本篇文章则是这个系列的开篇。&lt;/p&gt;
&lt;p&gt;系列安排：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上帝视角看 TypeScript（就是本文）&lt;/li&gt;
&lt;li&gt;TypeScript 类型系统&lt;/li&gt;
&lt;li&gt;什么是 types？什么是 @types？&lt;/li&gt;
&lt;li&gt;类型推导， 类型断言与类型保护&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/06/16/ts-generics/&quot;&gt;你不知道的 TypeScript 泛型（万字长文，建议收藏）&lt;/a&gt;（已发布）&lt;/li&gt;
&lt;li&gt;TypeScript 练习题&lt;/li&gt;
&lt;li&gt;TypeScript 配置文件该怎么写？&lt;/li&gt;
&lt;li&gt;TypeScript 是如何与 React，Vue，Webpack 集成的？&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目录将来可能会有所调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，我的系列文章基本不会讲 API，因此需要你有一定的 TypeScript 使用基础，推荐两个学习资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jkchao.github.io/typescript-book-chinese/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解 TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/home&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这两个资料和我的系列教程，掌握 TypeScript 指日可待。&lt;/p&gt;
&lt;p&gt;接下来，我们通过几个方面来从宏观的角度来看一下 TypeScript。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
      <category term="泛型" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/TypeScript/%E6%B3%9B%E5%9E%8B/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/tags/TypeScript/"/>
    
      <category term="泛型" scheme="https://lucifer.ren/blog/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>《我是你的妈妈呀》 - 第一期</title>
    <link href="https://lucifer.ren/blog/2020/08/03/mother-01/"/>
    <id>https://lucifer.ren/blog/2020/08/03/mother-01/</id>
    <published>2020-08-02T16:00:00.000Z</published>
    <updated>2020-08-03T03:55:20.423Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="母题" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/%E6%AF%8D%E9%A2%98/"/>
    
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="母题" scheme="https://lucifer.ren/blog/tags/%E6%AF%8D%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>一文带你看懂二叉树的序列化</title>
    <link href="https://lucifer.ren/blog/2020/07/24/serialize/"/>
    <id>https://lucifer.ren/blog/2020/07/24/serialize/</id>
    <published>2020-07-24T12:52:41.698Z</published>
    <updated>2020-07-26T14:39:44.168Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我们先来看下什么是序列化，以下定义来自维基百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始对象相同语义的副本。对于许多对象，像是使用大量引用的复杂对象，这种序列化重建的过程并不容易。面向对象中的对象序列化，并不概括之前原始对象所关系的函数。这种过程也称为对象编组（marshalling）。从一系列字节提取数据结构的反向操作，是反序列化（也称为解编组、deserialization、unmarshalling）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可见，序列化和反序列化在计算机科学中的应用还是非常广泛的。就拿 LeetCode 平台来说，其允许用户输入形如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[1,2,3,null,null,4,5]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样的数据结构来描述一颗树：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gh2dqqnyzwj30ba0baglw.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;([1,2,3,null,null,4,5] 对应的二叉树)&lt;/p&gt;
&lt;p&gt;其实序列化和反序列化只是一个概念，不是一种具体的算法，而是很多的算法。并且针对不同的数据结构，算法也会不一样。本文主要讲述的是二叉树的序列化和反序列化。看完本文之后，你就可以放心大胆地去 AC 以下两道题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/serialize-and-deserialize-bst/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;449. 序列化和反序列化二叉搜索树(中等)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;297. 二叉树的序列化与反序列化(困难)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
      <category term="算法，序列化" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="数据结构，二叉树" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
      <category term="二叉树" scheme="https://lucifer.ren/blog/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="序列化" scheme="https://lucifer.ren/blog/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>平衡二叉树专题</title>
    <link href="https://lucifer.ren/blog/2020/07/21/balanced-tree/"/>
    <id>https://lucifer.ren/blog/2020/07/21/balanced-tree/</id>
    <published>2020-07-20T16:00:00.000Z</published>
    <updated>2020-07-25T02:01:36.934Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;力扣关于平衡二叉树的题目还是有一些的，并且都非常经典，推荐大家练习。今天给大家精选了 4 道题，如果你彻底搞明白了这几道题，碰到其他的平衡二叉树的题目应该不至于没有思路。当你领会了我的思路之后， 建议再找几个题目练手，巩固一下学习成果。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="平衡二叉树" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="二叉搜索树" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二叉树" scheme="https://lucifer.ren/blog/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode日记】 611. 有效三角形的个数</title>
    <link href="https://lucifer.ren/blog/2020/07/20/611.triangle/"/>
    <id>https://lucifer.ren/blog/2020/07/20/611.triangle/</id>
    <published>2020-07-20T11:58:28.740Z</published>
    <updated>2020-07-20T11:59:18.279Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;题目地址： &lt;a href=&quot;https://leetcode-cn.com/problems/valid-triangle-number/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/valid-triangle-number/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数组" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/"/>
    
      <category term="双指针" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="Medium" scheme="https://lucifer.ren/blog/categories/Medium/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode日记" scheme="https://lucifer.ren/blog/tags/LeetCode%E6%97%A5%E8%AE%B0/"/>
    
      <category term="Medium" scheme="https://lucifer.ren/blog/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>immutablejs 是如何优化我们的代码的？</title>
    <link href="https://lucifer.ren/blog/2020/07/05/immutable-js/"/>
    <id>https://lucifer.ren/blog/2020/07/05/immutable-js/</id>
    <published>2020-07-05T09:07:23.926Z</published>
    <updated>2020-07-15T05:04:48.156Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;前一段时间群里有小伙伴问 lucifer 我一个问题：”immutablejs 是什么？有什么用？“。我当时的回答是：&lt;code&gt;immutablejs 就是 tree + sharing，解决了数据可变性带来的问题，并顺便优化了性能&lt;/code&gt;。今天给大家来详细解释一下这句话。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="https://lucifer.ren/blog/categories/React/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="https://lucifer.ren/blog/tags/React/"/>
    
      <category term="immutablejs" scheme="https://lucifer.ren/blog/tags/immutablejs/"/>
    
      <category term="immutable" scheme="https://lucifer.ren/blog/tags/immutable/"/>
    
  </entry>
  
  <entry>
    <title>想去力扣当前端，TypeScript 需要掌握到什么程度？</title>
    <link href="https://lucifer.ren/blog/2020/07/05/leetcode-interview-ts/"/>
    <id>https://lucifer.ren/blog/2020/07/05/leetcode-interview-ts/</id>
    <published>2020-07-05T01:48:03.757Z</published>
    <updated>2020-07-05T08:05:26.136Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;2018 年底的时候，力扣发布了岗位招聘，其中就有前端，仓库地址：&lt;a href=&quot;https://github.com/LeetCode-OpenSource/hire&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/LeetCode-OpenSource/hire&lt;/a&gt; 。与大多数 JD 不同， 其提供了 5 道题， 并注明了&lt;code&gt;完成一个或多个面试题，获取免第一轮面试的面试机会。完成的题目越多，质量越高，在面试中的加分更多。完成后的代码可以任意形式发送给 jobs@lingkou.com。以上几个问题完成一个或多个都有可能获得面试机会，具体情况取决于提交给我们的代码。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1ggfv55mufyj30u00wh0z0.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;（力扣中国前端工程师 JD）&lt;/p&gt;
&lt;p&gt;今天我们就来看下第二题：&lt;code&gt;编写复杂的 TypeScript 类型&lt;/code&gt;。通过这道题来看下， TypeScript 究竟要到什么水平才能进力扣当前端？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其它四道题也蛮有意思的，值得一看。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/categories/TypeScript/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>你的衣服我扒了 - 《最长公共子序列》</title>
    <link href="https://lucifer.ren/blog/2020/07/01/LCS/"/>
    <id>https://lucifer.ren/blog/2020/07/01/LCS/</id>
    <published>2020-07-01T06:38:48.291Z</published>
    <updated>2020-07-01T09:19:11.838Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前出了一篇&lt;a href=&quot;https://lucifer.ren/blog/2020/06/20/LIS/&quot;&gt;穿上衣服我就不认识你了？来聊聊最长上升子序列&lt;/a&gt;，收到了大家的一致好评。今天给大家带来的依然是换皮题 - 最长公共子序列系列。&lt;/p&gt;
&lt;p&gt;最长公共子序列是一个很经典的算法题。有的会直接让你求最长上升子序列，有的则会换个说法，但最终考察的还是最长公共子序列。那么问题来了，它穿上衣服你还看得出来是么？&lt;/p&gt;
&lt;p&gt;如果你完全看不出来了，说明抽象思维还不到火候。经常看我的题解的同学应该会知道，我经常强调&lt;code&gt;抽象思维&lt;/code&gt;。没有抽象思维，所有的题目对你来说都是新题。你无法将之前做题的经验迁移到这道题，那你做的题意义何在？&lt;/p&gt;
&lt;p&gt;虽然抽象思维很难练成，但是幸好算法套路是有限的，经常考察的题型更是有限的。从这些入手，或许可以让你轻松一些。本文就从一个经典到不行的题型《最长公共子序列》，来帮你进一步理解&lt;code&gt;抽象思维&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意。 本文是帮助你识别套路，从横向上理清解题的思维框架，并没有采用最优解，所有的题目给的解法可能不是最优的，但是都可以通过所有的测试用例。如果你想看最优解，可以直接去讨论区看。或者期待我的&lt;code&gt;深入剖析系列&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
      <category term="动态规划" scheme="https://lucifer.ren/blog/categories/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="动态规划" scheme="https://lucifer.ren/blog/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/tags/LeetCode/"/>
    
      <category term="最长公共子序列" scheme="https://lucifer.ren/blog/tags/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>穿上衣服我就不认识你了？来聊聊最长上升子序列</title>
    <link href="https://lucifer.ren/blog/2020/06/20/LIS/"/>
    <id>https://lucifer.ren/blog/2020/06/20/LIS/</id>
    <published>2020-06-20T10:58:30.938Z</published>
    <updated>2020-06-21T09:24:54.698Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最长上升子序列是一个很经典的算法题。有的会直接让你求最长上升子序列，有的则会换个说法，但最终考察的还是最长上升子序列。那么问题来了，它穿上衣服你还看得出来是么？&lt;/p&gt;
&lt;p&gt;如果你完全看不出来了，说明抽象思维还不到火候。经常看我的题解的同学应该会知道，我经常强调&lt;code&gt;抽象思维&lt;/code&gt;。没有抽象思维，所有的题目对你来说都是新题。你无法将之前做题的经验迁移到这道题，那你做的题意义何在？&lt;/p&gt;
&lt;p&gt;虽然抽象思维很难练成，但是幸好算法套路是有限的，经常考察的题型更是有限的。从这些入手，或许可以让你轻松一些。本文就从一个经典到不行的题型《最长上升子序列》，来帮你进一步理解&lt;code&gt;抽象思维&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意。 本文是帮助你识别套路，从横向上理清解题的思维框架，并没有采用最优解，所有的题目给的解法都不是最优的，但是都可以通过所有的测试用例。如果你想看最优解，可以直接去讨论区看。或者期待我的&lt;code&gt;深入剖析系列&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
      <category term="动态规划" scheme="https://lucifer.ren/blog/categories/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="动态规划" scheme="https://lucifer.ren/blog/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/tags/LeetCode/"/>
    
      <category term="最长上升子序列" scheme="https://lucifer.ren/blog/tags/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的 TypeScript 泛型（万字长文，建议收藏）</title>
    <link href="https://lucifer.ren/blog/2020/06/16/ts-generics/"/>
    <id>https://lucifer.ren/blog/2020/06/16/ts-generics/</id>
    <published>2020-06-16T01:53:19.384Z</published>
    <updated>2020-06-21T09:18:03.796Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;泛型是 TypeScript（以下简称 TS） 比较高级的功能之一，理解起来也比较困难。泛型应用场景非常广泛，很多地方都能看到它的影子。平时我们阅读开源 TS 项目源码，或者在自己的 TS 项目中使用一些第三方库（比如 React）的时候，经常会看到各种泛型定义。如果你不是特别了解泛型，那么你很可能不仅不会用，不会实现，甚至看不懂这是在干什么。&lt;/p&gt;
&lt;p&gt;相信大家都经历过，看到过，或者正在写&lt;strong&gt;一些应用，这些应用充斥着各种重复类型定义， any 类型层出不穷，鼠标移到变量上面的提示只有 any，不要说类型操作了，类型能写对都是个问题&lt;/strong&gt;。我也经历过这样的阶段，那个时候我对 TS 还比较陌生。&lt;/p&gt;
&lt;p&gt;随着在 TS 方面学习的深入，越来越认识到 &lt;strong&gt;真正的 TS 高手都是在玩类型&lt;/strong&gt;，对类型进行各种运算生成新的类型。这也好理解，毕竟 &lt;strong&gt;TS 提供的其实就是类型系统&lt;/strong&gt;。你去看那些 TS 高手的代码，会各种&lt;strong&gt;花式使用泛型&lt;/strong&gt;。 可以说泛型是一道坎，只有真正掌握它，你才知道&lt;strong&gt;原来 TS 还可以这么玩&lt;/strong&gt;。怪不得面试的时候大家都愿意问泛型，尽管面试官很可能也不怎么懂。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只有理解事物的内在逻辑，才算真正掌握了，不然永远只是皮毛，不得其法&lt;/strong&gt;。 本文就带你走进泛型，带你从另一个角度看看究竟什么是泛型，为什么要有它，它给 TS 带来了什么样的不同。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：不同语言泛型略有不同，知识迁移虽然可以，但是不能生搬硬套，本文所讲的泛型都指的是 TS 下的泛型。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
      <category term="泛型" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/TypeScript/%E6%B3%9B%E5%9E%8B/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/tags/TypeScript/"/>
    
      <category term="泛型" scheme="https://lucifer.ren/blog/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的前端异常处理（万字长文，建议收藏）</title>
    <link href="https://lucifer.ren/blog/2020/06/14/error-catch/"/>
    <id>https://lucifer.ren/blog/2020/06/14/error-catch/</id>
    <published>2020-06-14T07:54:17.496Z</published>
    <updated>2020-06-15T15:36:32.817Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;除了调试，处理异常或许是程序员编程时间占比最高的了。我们天天和各种异常打交道，就好像我们天天和 Bug 打交道一样。因此正确认识异常，并作出合适的异常处理就显得很重要了。&lt;/p&gt;
&lt;p&gt;我们先尝试抛开前端这个限定条件，来看下更广泛意义上程序的报错以及异常处理。不管是什么语言，都会有异常的发生。而我们程序员要做的就是正确识别程序中的各种异常，并针对其做相应的&lt;strong&gt;异常处理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;然而，很多人对异常的处理方式是&lt;strong&gt;事后修补&lt;/strong&gt;，即某个异常发生的时候，增加对应的条件判断，这真的是一种非常低效的开发方式，非常不推荐大家这么做。那么究竟如何正确处理异常呢？由于不同语言有不同的特性，因此异常处理方式也不尽相同。但是异常处理的思维框架一定是一致的。本文就&lt;strong&gt;前端&lt;/strong&gt;异常进行详细阐述，但是读者也可以稍加修改延伸到其他各个领域。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文讨论的异常指的是软件异常，而非硬件异常。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="异常处理" scheme="https://lucifer.ren/blog/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>一招吃遍力扣四道题，妈妈再也不用担心我被套路啦～</title>
    <link href="https://lucifer.ren/blog/2020/06/13/%E5%88%A0%E9%99%A4%E9%97%AE%E9%A2%98/"/>
    <id>https://lucifer.ren/blog/2020/06/13/删除问题/</id>
    <published>2020-06-13T13:12:04.222Z</published>
    <updated>2020-06-14T07:46:06.467Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我花了几天时间，从力扣中精选了四道相同思想的题目，来帮助大家解套，如果觉得文章对你有用，记得点赞分享，让我看到你的认可，有动力继续做下去。&lt;/p&gt;
&lt;p&gt;这就是接下来要给大家讲的四个题，其中 1081 和 316 题只是换了说法而已。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-duplicate-letters/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;316. 去除重复字母&lt;/a&gt;(困难)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/create-maximum-number/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;321. 拼接最大数&lt;/a&gt;(困难)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-k-digits/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;402. 移掉 K 位数字&lt;/a&gt;(中等)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1081. 不同字符的最小子序列&lt;/a&gt;（中等）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/tags/LeetCode/"/>
    
      <category term="经验分享" scheme="https://lucifer.ren/blog/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
      <category term="困难" scheme="https://lucifer.ren/blog/tags/%E5%9B%B0%E9%9A%BE/"/>
    
      <category term="中等" scheme="https://lucifer.ren/blog/tags/%E4%B8%AD%E7%AD%89/"/>
    
      <category term="删除 k 个字符" scheme="https://lucifer.ren/blog/tags/%E5%88%A0%E9%99%A4-k-%E4%B8%AA%E5%AD%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>算法小白如何高效、快速刷 leetcode？</title>
    <link href="https://lucifer.ren/blog/2020/06/12/%E5%88%B7%E9%A2%98%E6%96%B0%E6%89%8B/"/>
    <id>https://lucifer.ren/blog/2020/06/12/刷题新手/</id>
    <published>2020-06-12T05:08:50.617Z</published>
    <updated>2020-06-12T10:51:39.356Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我本身刷了大概 600 道左右的题目，总结 200 多篇的题解，另外总结了十多个常见的算法专题，基本已经覆盖了大多数的常见考点和题型，全部放在我的 Github &lt;a href=&quot;https://github.com/azl397985856/leetcode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/azl397985856/leetcode&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;然而作为一个新手，看着茫茫多的题解和资料难免会陷入一种“不知从何开始”的境地。&lt;strong&gt;不必担心，你不是一个人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，我最近一直在思考“初学者如何快速提高自己的算法能力，高效刷题”。因此我也一直在不断定位自己，最终我对自己作出了定位“用清晰直白的语言还原解题全过程，做西湖区最好的算法题解”。&lt;/p&gt;
&lt;p&gt;然而我意识到，我进去了一个很大的误区。我的想法一直是“努力帮助算法小白提高算法能力，高效刷题”。然而算法小白除了清晰直白的算法题解外，还需要系统的前置知识。因此我的假设“大家都会基础的数据结构和算法”很可能就是不成立的。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
      <category term="经验分享" scheme="https://lucifer.ren/blog/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/tags/LeetCode/"/>
    
      <category term="经验分享" scheme="https://lucifer.ren/blog/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode 日记】面试题46. 把数字翻译成字符串</title>
    <link href="https://lucifer.ren/blog/2020/06/09/%E9%9D%A2%E8%AF%95%E9%A2%9846.%20%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://lucifer.ren/blog/2020/06/09/面试题46. 把数字翻译成字符串/</id>
    <published>2020-06-09T07:39:25.086Z</published>
    <updated>2020-06-09T08:35:27.087Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;​
    
    </summary>
    
      <category term="算法，动态规划" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="中等" scheme="https://lucifer.ren/blog/categories/%E4%B8%AD%E7%AD%89/"/>
    
    
      <category term="数据结构，算法，LeetCode 日记，中等" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E7%AE%97%E6%B3%95%EF%BC%8CLeetCode-%E6%97%A5%E8%AE%B0%EF%BC%8C%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>前端测试最佳实践（持续更新，建议收藏）</title>
    <link href="https://lucifer.ren/blog/2020/06/08/fe-test-best-practice/"/>
    <id>https://lucifer.ren/blog/2020/06/08/fe-test-best-practice/</id>
    <published>2020-06-08T10:50:57.061Z</published>
    <updated>2020-06-08T10:51:55.415Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近公司在推行单元测试，但是一些同事对于单元测试只是了解，甚至不怎么了解。因此推动单元测试的阻碍是有的，这种阻碍除了人的层面，还有基础设施的层面。希望通过本文，一方面加深大家对前端测试最佳实践的认知，另一方面可以作为手册，在日常开发中做参考。本文也会不断更新，期待你的参与。&lt;/p&gt;
&lt;p&gt;如果大家对前端测试不太清楚，可以先看下文末我写的科普短文。如果你已经对前端测试有所了解，并且希望对前端测试有更深入的了解，以及对如何写出更好的单元测试有兴趣的话，那就让我们开始吧。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="测试" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="测试" scheme="https://lucifer.ren/blog/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="单元测试" scheme="https://lucifer.ren/blog/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="vue" scheme="https://lucifer.ren/blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>《丢鸡蛋问题》重制版来袭～</title>
    <link href="https://lucifer.ren/blog/2020/06/08/887.super-egg-drop/"/>
    <id>https://lucifer.ren/blog/2020/06/08/887.super-egg-drop/</id>
    <published>2020-06-07T16:00:00.000Z</published>
    <updated>2020-06-16T10:10:08.926Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这是一道 LeetCode 难度为 Hard 的题目，很多大公司都会考，来看看。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数组" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://lucifer.ren/blog/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>刷题效率低？或许你就差这么一个插件</title>
    <link href="https://lucifer.ren/blog/2020/06/06/algo-chrome-extension/"/>
    <id>https://lucifer.ren/blog/2020/06/06/algo-chrome-extension/</id>
    <published>2020-06-06T10:14:06.364Z</published>
    <updated>2020-06-06T10:51:33.671Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这两天我写了一个浏览器插件，这个插件的定位就是帮助大家提高刷题效率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gfiqhxykhtj32m10u0qdc.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="扩展程序" scheme="https://lucifer.ren/blog/tags/%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="Chrome" scheme="https://lucifer.ren/blog/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>【异议！】第一期 《这个🦅题的复杂度怎么分析？》</title>
    <link href="https://lucifer.ren/blog/2020/06/03/over-fancy01/"/>
    <id>https://lucifer.ren/blog/2020/06/03/over-fancy01/</id>
    <published>2020-06-02T16:00:00.000Z</published>
    <updated>2020-06-03T08:46:26.345Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;力扣加加，努力做西湖区最好的算法题解。&lt;/p&gt;
&lt;p&gt;去年的一年时间，我在群里每天都会出题给大家做。但是就在 2020-03 开始，力扣也开展了每日一题活动。我突然觉得这个每日一题的必要性变得小了很多，并且逐渐减少了出题频率。但是我还是不愿意放弃大家一起集中进行交流学习的机会。于是我打算新开辟一个专题，这个专题一方面要和力扣官方的每日一题重合度低，另一方面要让大家有参与的热情。&lt;/p&gt;
&lt;p&gt; 于是【异议！】系列应运而生。它是个什么东西呢？ 我相信大家一定在平时刷算法的过程中，一定遇到过“这解法怎么想到的？”，“这解法不对吧？”的情况，并且可悲的是没有人能够回答你。来这里，&lt;strong&gt;力扣加加&lt;/strong&gt; 来回答你。 我们会对大家提出的问题进行筛选，将有意义的问题开放出来给大家讨论和学习。&lt;/p&gt;
&lt;p&gt;本次给大家带来的/是【异议！】系列&lt;strong&gt;第一篇&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="异议！" scheme="https://lucifer.ren/blog/categories/%E5%BC%82%E8%AE%AE%EF%BC%81/"/>
    
    
      <category term="异议！" scheme="https://lucifer.ren/blog/tags/%E5%BC%82%E8%AE%AE%EF%BC%81/"/>
    
  </entry>
  
  <entry>
    <title>听说这题套个BFS模板就可以 AC？</title>
    <link href="https://lucifer.ren/blog/2020/06/02/1091.shortest-path-in-binary-matrix/"/>
    <id>https://lucifer.ren/blog/2020/06/02/1091.shortest-path-in-binary-matrix/</id>
    <published>2020-06-02T06:08:24.143Z</published>
    <updated>2020-06-02T08:10:17.418Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;​
    
    </summary>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/BFS/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="BFS" scheme="https://lucifer.ren/blog/tags/BFS/"/>
    
  </entry>
  
</feed>
