<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lucifer的网络博客</title>
  
  <subtitle>LeetCode 前端</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://lucifer.ren/blog/"/>
  <updated>2020-05-23T05:19:49.054Z</updated>
  <id>https://lucifer.ren/blog/</id>
  
  <author>
    <name>lucifer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回炉重铸， 91 天见证不一样的自己</title>
    <link href="https://lucifer.ren/blog/2020/05/23/91-algo/"/>
    <id>https://lucifer.ren/blog/2020/05/23/91-algo/</id>
    <published>2020-05-23T02:31:23.707Z</published>
    <updated>2020-05-23T05:19:49.054Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;力扣加加，一个努力做西湖区最好的算法题解的团队。就在今天它给大家带来了《91 天学算法》，帮助大家摆脱困境，征服算法。&lt;/p&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gf2atkdikgj30u70u0tct.jpg&quot; width=&quot;50%&quot;&gt;

&lt;p&gt;​
    
    </summary>
    
      <category term="力扣加加" scheme="https://lucifer.ren/blog/categories/%E5%8A%9B%E6%89%A3%E5%8A%A0%E5%8A%A0/"/>
    
      <category term="91天学算法" scheme="https://lucifer.ren/blog/categories/91%E5%A4%A9%E5%AD%A6%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法提高班" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95%E6%8F%90%E9%AB%98%E7%8F%AD/"/>
    
      <category term="91天学算法" scheme="https://lucifer.ren/blog/tags/91%E5%A4%A9%E5%AD%A6%E7%AE%97%E6%B3%95/"/>
    
      <category term="力扣加加" scheme="https://lucifer.ren/blog/tags/%E5%8A%9B%E6%89%A3%E5%8A%A0%E5%8A%A0/"/>
    
  </entry>
  
  <entry>
    <title>《黑客与画家》摘抄</title>
    <link href="https://lucifer.ren/blog/2020/05/21/hacker-drawer/"/>
    <id>https://lucifer.ren/blog/2020/05/21/hacker-drawer/</id>
    <published>2020-05-21T11:10:31.720Z</published>
    <updated>2020-05-21T11:36:55.720Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="书摘" scheme="https://lucifer.ren/blog/categories/%E4%B9%A6%E6%91%98/"/>
    
    
      <category term="书摘" scheme="https://lucifer.ren/blog/tags/%E4%B9%A6%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode日记】 1371. 每个元音包含偶数次的最长子字符串</title>
    <link href="https://lucifer.ren/blog/2020/05/20/1371.find-the-longest-substring-containing-vowels-in-even-count/"/>
    <id>https://lucifer.ren/blog/2020/05/20/1371.find-the-longest-substring-containing-vowels-in-even-count/</id>
    <published>2020-05-20T12:22:21.514Z</published>
    <updated>2020-05-20T12:38:23.796Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这道题还是蛮有意思的，我用了多种方法来解决，干货满满，点进来看看？&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="前缀和" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
      <category term="状态压缩" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="前缀和" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
      <category term="状态压缩" scheme="https://lucifer.ren/blog/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode日记】 343. 整数拆分</title>
    <link href="https://lucifer.ren/blog/2020/05/16/343.integer-break/"/>
    <id>https://lucifer.ren/blog/2020/05/16/343.integer-break/</id>
    <published>2020-05-16T03:52:36.605Z</published>
    <updated>2020-05-16T03:54:00.785Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;希望通过这篇题解让大家知道“题解区的水有多深”，让大家知道“什么才是好的题解”。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="hashtable" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashtable/"/>
    
      <category term="动态规划" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="Medium" scheme="https://lucifer.ren/blog/categories/Medium/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode日记" scheme="https://lucifer.ren/blog/tags/LeetCode%E6%97%A5%E8%AE%B0/"/>
    
      <category term="Medium" scheme="https://lucifer.ren/blog/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>为什么eslint没有 no-magic-string？</title>
    <link href="https://lucifer.ren/blog/2020/05/05/why-no-magic-string/"/>
    <id>https://lucifer.ren/blog/2020/05/05/why-no-magic-string/</id>
    <published>2020-05-04T16:00:00.000Z</published>
    <updated>2020-05-05T12:41:31.066Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近参加了几次公司组内的 Code Review， 发现了一些问题。其中一些问题可以通过工具（比如 eslint）解决。 我们就想着通过工具自动化的方式进行解决。 而这些工具中有一些是现成的，比如 魔法数。 大家对魔法数的看法也是莫衷一是。本文通过&lt;code&gt;讲解什么是魔法数，eslint 是怎么检查魔法数的，以及思考为什么eslint 偏爱数字，而不是偏爱字符串来&lt;/code&gt; 来深入剖析一下魔法数。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="eslint" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/eslint/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="eslint" scheme="https://lucifer.ren/blog/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>纪念LeetCode项目Star突破3W</title>
    <link href="https://lucifer.ren/blog/2020/04/16/thanksGiving3/"/>
    <id>https://lucifer.ren/blog/2020/04/16/thanksGiving3/</id>
    <published>2020-04-16T03:26:35.438Z</published>
    <updated>2020-04-16T09:20:37.814Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;差不多一年的时间，项目收获了第 3W 个 Star，平均差不多一天 100 左右的 star，非常感谢大家的关注和支持。&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="https://lucifer.ren/blog/categories/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="技术" scheme="https://lucifer.ren/blog/categories/%E6%97%A5%E8%AE%B0/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="日记" scheme="https://lucifer.ren/blog/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>『不要再问我头像如何变灰了，试试这几种滤镜吧！』</title>
    <link href="https://lucifer.ren/blog/2020/04/12/canvas-filter/"/>
    <id>https://lucifer.ren/blog/2020/04/12/canvas-filter/</id>
    <published>2020-04-11T16:00:00.000Z</published>
    <updated>2020-04-12T05:10:46.392Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在实际的工作中，有时候会有一些需求，让你做一些图片的滤镜效果，比如将图片变成黑白，调整图片亮度等。本文手把手教你如何实现&lt;code&gt;五种滤镜效果&lt;/code&gt;，核心代码总共不到 70 行。&lt;/p&gt;
&lt;p&gt;笔者所在的公司就有一个需求需要用到图片处理的知识，大概场景我来描述一下：&lt;/p&gt;
&lt;p&gt;用户可以手动上传印章，并且支持给印章设置不同的显示效果，这里的效果具体指的是“线条的清晰程度”，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gdqrt9ppu9j30j606pjsb.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;这里我们使用 Canvas 来实现。如果你对 Canvas 不熟悉，建议看下之前我写的一篇文章&lt;a href=&quot;https://cloud.tencent.com/developer/article/1494747&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;100 * 100 Canvas 占用内存多大&lt;/a&gt;，花上几分钟看完，基本上够看懂这篇文章了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Canvas" scheme="https://lucifer.ren/blog/tags/Canvas/"/>
    
      <category term="图片处理" scheme="https://lucifer.ren/blog/tags/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
    
      <category term="滤镜" scheme="https://lucifer.ren/blog/tags/%E6%BB%A4%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>或许是一本可以彻底改变你刷 LeetCode 效率的题解书</title>
    <link href="https://lucifer.ren/blog/2020/04/07/leetcode-book.intro/"/>
    <id>https://lucifer.ren/blog/2020/04/07/leetcode-book.intro/</id>
    <published>2020-04-07T07:01:24.450Z</published>
    <updated>2020-04-07T11:13:53.307Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;经过了半年时间打磨，投入诸多人力，这本 LeetCode 题解书终于快要和大家见面了。目前已经完成了大部分章节的编写工作，预计经过一段时间的打磨就会和大家见面啦 💐💐💐💐💐。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/tags/LeetCode/"/>
    
      <category term="我的书" scheme="https://lucifer.ren/blog/tags/%E6%88%91%E7%9A%84%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>每日一荐 2020-03 汇总</title>
    <link href="https://lucifer.ren/blog/2020/04/07/daily-featured-2020-03/"/>
    <id>https://lucifer.ren/blog/2020/04/07/daily-featured-2020-03/</id>
    <published>2020-04-07T03:20:43.505Z</published>
    <updated>2020-04-07T03:21:21.673Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g8d0sktqrwj30hs07maae.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;每天给你推荐一个新奇，好玩，高品质的开源库，好文，观点或言论等。&lt;/p&gt;
&lt;p&gt;项目主页维护当前月份的内容，想看往期内容，可以去&lt;a href=&quot;https://github.com/azl397985856/daily-featured&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;每日一荐主仓库&lt;/a&gt;翻到下方历史汇总部分，然后选择自己感兴趣的月份点进去即可。&lt;/p&gt;
    
    </summary>
    
      <category term="每日一荐" scheme="https://lucifer.ren/blog/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%8D%90/"/>
    
      <category term="2020-03" scheme="https://lucifer.ren/blog/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%8D%90/2020-03/"/>
    
    
      <category term="每日一荐" scheme="https://lucifer.ren/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>《82 年生的金智英》</title>
    <link href="https://lucifer.ren/blog/2020/04/06/82-jinzhiying/"/>
    <id>https://lucifer.ren/blog/2020/04/06/82-jinzhiying/</id>
    <published>2020-04-05T16:00:00.000Z</published>
    <updated>2020-04-06T04:37:52.843Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《82 年生的金智英》（韩文原始名： 82년생 김지영）是一部由同名小说改编，于 2019 年 10 月 23 号在韩国上映的韩国电影。由金度英执导，郑裕美、孔刘主演。该片讲述出生于 1982 年的三十多岁平凡女性金智英，在产子后因为周围人事变化，以及家庭中婆婆等家人的言行一度造成其心理疾病，以及在其丈夫和家人的帮助下寻找自我恢复。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="电影" scheme="https://lucifer.ren/blog/categories/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="观后感" scheme="https://lucifer.ren/blog/categories/%E7%94%B5%E5%BD%B1/%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    
    
      <category term="电影" scheme="https://lucifer.ren/blog/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>《饥饿站台》</title>
    <link href="https://lucifer.ren/blog/2020/04/06/movie-eager-game/"/>
    <id>https://lucifer.ren/blog/2020/04/06/movie-eager-game/</id>
    <published>2020-04-05T16:00:00.000Z</published>
    <updated>2020-04-06T04:19:54.516Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《饥饿站台》 （西班牙语：El hoyo）是一部 2019 年的西班牙科幻惊悚电影。导演为加尔德图．加兹特鲁—乌鲁蒂亚里，编剧为佩德罗．里书罗、大卫・狄索拉；由伊万·马萨格、安东尼亚·圣·胡安、佐里昂・埃奎勒、埃米利奥·布阿勒、亚莉珊卓·马桑凯主演。电影情节设于一个塔状的监狱中，囚犯从监狱中间逐渐下降的大平台拿取食物。2019 年 9 月 6 日于 2019 年多伦多国际影展举行首映。&lt;/p&gt;
    
    </summary>
    
      <category term="电影" scheme="https://lucifer.ren/blog/categories/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="观后感" scheme="https://lucifer.ren/blog/categories/%E7%94%B5%E5%BD%B1/%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    
    
      <category term="电影" scheme="https://lucifer.ren/blog/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode日记】 1162. 地图分析</title>
    <link href="https://lucifer.ren/blog/2020/03/30/leetcode-island/"/>
    <id>https://lucifer.ren/blog/2020/03/30/leetcode-island/</id>
    <published>2020-03-30T10:13:36.154Z</published>
    <updated>2020-03-30T10:19:43.600Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;LeetCode上有很多小岛题，虽然官方没有这个标签， 但是在我这里都差不多。不管是思路还是套路都比较类似，大家可以结合起来练习。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/azl397985856/leetcode/blob/master/problems/200.number-of-islands.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;200.number-of-islands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/max-area-of-island/solution/695-dao-yu-de-zui-da-mian-ji-dfspython3-by-fe-luci/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;695.max-area-of-island&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="hashtable" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashtable/"/>
    
      <category term="BFS" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/BFS/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode日记" scheme="https://lucifer.ren/blog/tags/LeetCode%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>位运算</title>
    <link href="https://lucifer.ren/blog/2020/03/24/bit/"/>
    <id>https://lucifer.ren/blog/2020/03/24/bit/</id>
    <published>2020-03-23T16:00:00.000Z</published>
    <updated>2020-03-27T02:48:13.455Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我这里总结了几道位运算的题目分享给大家，分别是 136和137， 260 和  645， 总共加起来四道题。 四道题全部都是位运算的套路，如果你想练习位运算的话，不要错过哦～～&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="位运算" scheme="https://lucifer.ren/blog/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>一文带你 AC 十道题【滑动窗口】</title>
    <link href="https://lucifer.ren/blog/2020/03/16/slide-window/"/>
    <id>https://lucifer.ren/blog/2020/03/16/slide-window/</id>
    <published>2020-03-16T13:53:30.342Z</published>
    <updated>2020-03-17T02:15:12.628Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;笔者最早接触滑动窗口是&lt;code&gt;滑动窗口协议&lt;/code&gt;，滑动窗口协议（Sliding Window Protocol），属于 TCP 协议的一种应用，用于网络数据传输时的流量控制，以避免拥塞的发生。 发送方和接收方分别有一个窗口大小 w1 和 w2。窗口大小可能会根据网络流量的变化而有所不同，但是在更简单的实现中它们是固定的。窗口大小必须大于零才能进行任何操作。&lt;/p&gt;
&lt;p&gt;我们算法中的滑动窗口也是类似，只不过包括的情况更加广泛。实际上上面的滑动窗口在某一个时刻就是固定窗口大小的滑动窗口，随着网络流量等因素改变窗口大小也会随着改变。接下来我们讲下算法中的滑动窗口。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
      <category term="算法，滑动窗口" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95%EF%BC%8C%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
      <category term="数据结构，数组" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E6%95%B0%E7%BB%84/"/>
    
      <category term="数据结构，字符串" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="滑动窗口" scheme="https://lucifer.ren/blog/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode 日记】85. 最大矩形</title>
    <link href="https://lucifer.ren/blog/2020/03/04/85.maximal-rectangle/"/>
    <id>https://lucifer.ren/blog/2020/03/04/85.maximal-rectangle/</id>
    <published>2020-03-03T17:13:49.879Z</published>
    <updated>2020-03-03T17:15:05.705Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这是一道 Hard 难度的题目，本题的解法很多，让我们来看一下。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="数据结构，单调栈" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
      <category term="Hard" scheme="https://lucifer.ren/blog/categories/Hard/"/>
    
    
      <category term="数据结构，算法，LeetCode 日记，Hard" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E7%AE%97%E6%B3%95%EF%BC%8CLeetCode-%E6%97%A5%E8%AE%B0%EF%BC%8CHard/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode 日记】 84. 柱状图中最大的矩形</title>
    <link href="https://lucifer.ren/blog/2020/03/04/84.largest-rectangle-in-histogram/"/>
    <id>https://lucifer.ren/blog/2020/03/04/84.largest-rectangle-in-histogram/</id>
    <published>2020-03-03T17:06:48.759Z</published>
    <updated>2020-03-03T17:14:05.348Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这是一道 Hard 难度的题目，本题的解法很多，让我们来看一下。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="数据结构，单调栈" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
      <category term="Hard" scheme="https://lucifer.ren/blog/categories/Hard/"/>
    
    
      <category term="数据结构，算法，LeetCode 日记，Hard" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E7%AE%97%E6%B3%95%EF%BC%8CLeetCode-%E6%97%A5%E8%AE%B0%EF%BC%8CHard/"/>
    
  </entry>
  
  <entry>
    <title>每日一荐 2020-01 汇总</title>
    <link href="https://lucifer.ren/blog/2020/02/25/daily-featured-2020-01/"/>
    <id>https://lucifer.ren/blog/2020/02/25/daily-featured-2020-01/</id>
    <published>2020-02-25T02:39:51.279Z</published>
    <updated>2020-02-25T02:41:25.898Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g8d0sktqrwj30hs07maae.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;每天给你推荐一个新奇，好玩，高品质的开源库，好文，观点或言论等。&lt;/p&gt;
&lt;p&gt;项目主页维护当前月份的内容，想看往期内容，可以去&lt;a href=&quot;https://github.com/azl397985856/daily-featured&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;每日一荐主仓库&lt;/a&gt;翻到下方历史汇总部分，然后选择自己感兴趣的月份点进去即可。&lt;/p&gt;
    
    </summary>
    
      <category term="每日一荐" scheme="https://lucifer.ren/blog/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%8D%90/"/>
    
      <category term="2020-01" scheme="https://lucifer.ren/blog/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%8D%90/2020-01/"/>
    
    
      <category term="每日一荐" scheme="https://lucifer.ren/blog/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>【算法提高班】并查集</title>
    <link href="https://lucifer.ren/blog/2020/02/20/union-find/"/>
    <id>https://lucifer.ren/blog/2020/02/20/union-find/</id>
    <published>2020-02-20T10:41:19.407Z</published>
    <updated>2020-02-20T11:10:06.792Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;关于并查集的题目不少，官方给的数据是 30 道（截止 2020-02-20），但是有一些题目虽然官方没有贴&lt;code&gt;并查集&lt;/code&gt;标签，但是使用并查集来说确非常简单。这类题目如果掌握模板，那么刷这种题会非常快，并且犯错的概率会大大降低，这就是模板的好处。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/tags/LeetCode/"/>
    
      <category term="算法系列" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>贪婪策略系列 - 覆盖篇</title>
    <link href="https://lucifer.ren/blog/2020/02/19/leetcode-greedy/"/>
    <id>https://lucifer.ren/blog/2020/02/19/leetcode-greedy/</id>
    <published>2020-02-18T16:00:52.081Z</published>
    <updated>2020-02-18T16:02:35.989Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;贪婪策略是一种常见的算法思想，具体是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关，这点和动态规划一样。&lt;/p&gt;
&lt;p&gt;LeetCode 上对于贪婪策略有 73 道题目。我们将其分成几个类型来讲解，截止目前我们暂时只提供&lt;code&gt;覆盖&lt;/code&gt;问题，其他的可以期待我的新书或者之后的题解文章。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
      <category term="贪婪" scheme="https://lucifer.ren/blog/categories/%E8%B4%AA%E5%A9%AA/"/>
    
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/tags/LeetCode/"/>
    
      <category term="算法系列" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/"/>
    
      <category term="贪婪" scheme="https://lucifer.ren/blog/tags/%E8%B4%AA%E5%A9%AA/"/>
    
  </entry>
  
  <entry>
    <title>构造二叉树系列</title>
    <link href="https://lucifer.ren/blog/2020/02/08/%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%93%E9%A2%98/"/>
    <id>https://lucifer.ren/blog/2020/02/08/构造二叉树专题/</id>
    <published>2020-02-08T11:59:44.329Z</published>
    <updated>2020-02-08T12:20:31.345Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;构造二叉树是一个常见的二叉树考点，相比于直接考察二叉树的遍历，这种题目的难度会更大。截止到目前(2020-02-08) LeetCode 关于构造二叉树一共有三道题目，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;105. 从前序与中序遍历序列构造二叉树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;106. 从中序与后序遍历序列构造二叉树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;889. 根据前序和后序遍历构造二叉树&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天就让我们用一个套路一举攻破他们。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
      <category term="二叉树" scheme="https://lucifer.ren/blog/categories/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/tags/LeetCode/"/>
    
      <category term="算法系列" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/"/>
    
      <category term="二叉树" scheme="https://lucifer.ren/blog/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
</feed>
