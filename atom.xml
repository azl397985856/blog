<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lucifer的网络博客</title>
  
  <subtitle>LeetCode 前端</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://lucifer.ren/blog/"/>
  <updated>2020-10-18T07:27:40.165Z</updated>
  <id>https://lucifer.ren/blog/</id>
  
  <author>
    <name>lucifer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript 练习题(第二弹)</title>
    <link href="https://lucifer.ren/blog/2020/10/13/ts-exercises-2/"/>
    <id>https://lucifer.ren/blog/2020/10/13/ts-exercises-2/</id>
    <published>2020-10-12T16:00:00.000Z</published>
    <updated>2020-10-18T07:27:40.165Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript 的学习资料非常多，其中也不乏很多优秀的文章和教程。但是目前为止没有一个我特别满意的。原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们大多数没有一个清晰的主线，而是按照 API 组织章节的，内容在&lt;strong&gt;逻辑上&lt;/strong&gt;比较零散。&lt;/li&gt;
&lt;li&gt;大多是“讲是什么，怎么用“，而不是”讲为什么，讲原理“。&lt;/li&gt;
&lt;li&gt;大多数内容比较枯燥，趣味性比较低。都是干巴巴的文字，没有图片，缺乏能够引起强烈共鸣的例子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我的想法是做一套不同市面上大多数的 TypeScript 学习教程。以人类认知的角度思考问题，学习 TypeScript，通过通俗易懂的例子和图片来帮助大家建立 TypeScript 世界观。&lt;/p&gt;
&lt;p&gt;系列安排：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/04/ts-internal/&quot;&gt;上帝视角看 TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/15/ts-type-system/&quot;&gt;TypeScript 类型系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/21/ts-type/&quot;&gt;types 和 @types 是什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/06/16/ts-generics/&quot;&gt;你不知道的 TypeScript 泛型（万字长文，建议收藏）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/24/ts-config/&quot;&gt;TypeScript 配置文件该怎么写？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TypeScript 是如何与 React，Vue，Webpack 集成的？&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/09/27/ts-exercises/&quot;&gt;TypeScript 练习题(第一弹)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目录将来可能会有所调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，我的系列文章基本不会讲 API，因此需要你有一定的 TypeScript 使用基础，推荐两个学习资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jkchao.github.io/typescript-book-chinese/&quot; title=&quot;深入理解 TypeScript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解 TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/home&quot; title=&quot;TypeScript 官方文档&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TypeScript 官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这两个资料和我的系列教程，掌握 TypeScript 指日可待。&lt;/p&gt;
&lt;p&gt;接下来，我们通过几个方面来从宏观的角度来看一下 TypeScript。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>西法喊你参加模拟面试~</title>
    <link href="https://lucifer.ren/blog/2020/10/07/mock-interview/"/>
    <id>https://lucifer.ren/blog/2020/10/07/mock-interview/</id>
    <published>2020-10-06T16:00:00.000Z</published>
    <updated>2020-10-07T11:29:21.429Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;很多粉丝向西法我反应：&lt;code&gt;做了很多题。看到新的题目还是不会， 看了题解之后又觉得自己会，但是自己写又写不出来。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个现象实际上很常见， 破局的最有效方法就是&lt;strong&gt;多做题&lt;/strong&gt;。 是真正地做出来，而不是看了会了，要自己从零 coding。&lt;/p&gt;
&lt;p&gt;我之前讲过&lt;strong&gt;对于新手的建议是按 tag 刷， 对于老手或者马上要面试的我建议随机刷。&lt;/strong&gt; 今天我在补充一句，那就是不管大家用哪种方式刷，建议大家都通过模拟面试或者竞赛的形式刷。 时间条件允许的可以参加周赛，不允许的则可以模拟面试。&lt;/p&gt;
    
    </summary>
    
      <category term="模拟面试" scheme="https://lucifer.ren/blog/categories/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="模拟面试" scheme="https://lucifer.ren/blog/tags/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>百度的算法面试题 - 祖玛游戏</title>
    <link href="https://lucifer.ren/blog/2020/10/06/zuma-game/"/>
    <id>https://lucifer.ren/blog/2020/10/06/zuma-game/</id>
    <published>2020-10-05T16:00:00.000Z</published>
    <updated>2020-10-06T03:55:55.427Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这是一道百度的算法面试题， 让我来拷拷你~。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
      <category term="Hard" scheme="https://lucifer.ren/blog/categories/Hard/"/>
    
      <category term="回溯" scheme="https://lucifer.ren/blog/categories/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="双指针" scheme="https://lucifer.ren/blog/categories/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    
      <category term="Hard" scheme="https://lucifer.ren/blog/tags/Hard/"/>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/tags/LeetCode/"/>
    
      <category term="回溯" scheme="https://lucifer.ren/blog/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="双指针" scheme="https://lucifer.ren/blog/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>【西法带你学算法】一次搞定前缀和</title>
    <link href="https://lucifer.ren/blog/2020/09/27/atMostK/"/>
    <id>https://lucifer.ren/blog/2020/09/27/atMostK/</id>
    <published>2020-09-27T05:14:21.930Z</published>
    <updated>2020-09-30T06:09:44.236Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我花了几天时间，从力扣中精选了五道相同思想的题目，来帮助大家解套，如果觉得文章对你有用，记得点赞分享，让我看到你的认可，有动力继续做下去。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/unique-substrings-in-wraparound-string/&quot; title=&quot;467. 环绕字符串中唯一的子字符串&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;467. 环绕字符串中唯一的子字符串&lt;/a&gt;(中等)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/number-of-subarrays-with-bounded-maximum/&quot; title=&quot;795. 区间子数组个数&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;795. 区间子数组个数&lt;/a&gt;(中等)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/fruit-into-baskets/&quot; title=&quot;904. 水果成篮&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;904. 水果成篮&lt;/a&gt;(中等)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/subarrays-with-k-different-integers/&quot; title=&quot;992. K 个不同整数的子数组&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;992. K 个不同整数的子数组&lt;/a&gt;（困难）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/corporate-flight-bookings/&quot; title=&quot;1109. 航班预订统计&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1109. 航班预订统计&lt;/a&gt;(中等)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前四道题都是滑动窗口的子类型，我们知道滑动窗口适合在题目要求连续的情况下使用， 而&lt;a href=&quot;https://oi-wiki.org/basic/prefix-sum/&quot; title=&quot;前缀和&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前缀和&lt;/a&gt;也是如此。二者在连续问题中，对于&lt;strong&gt;优化时间复杂度&lt;/strong&gt;有着很重要的意义。 因此如果一道题你可以用暴力解决出来，而且题目恰好有连续的限制， 那么滑动窗口和前缀和等技巧就应该被想到。&lt;/p&gt;
&lt;p&gt;除了这几道题， 还有很多题目都是类似的套路， 大家可以在学习过程中进行体会。今天我们就来一起学习一下。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
    
      <category term="滑动窗口" scheme="https://lucifer.ren/blog/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
      <category term="前缀和" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/tags/LeetCode/"/>
    
      <category term="经验分享" scheme="https://lucifer.ren/blog/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
      <category term="困难" scheme="https://lucifer.ren/blog/tags/%E5%9B%B0%E9%9A%BE/"/>
    
      <category term="中等" scheme="https://lucifer.ren/blog/tags/%E4%B8%AD%E7%AD%89/"/>
    
      <category term="子数组" scheme="https://lucifer.ren/blog/tags/%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    
      <category term="k 问题" scheme="https://lucifer.ren/blog/tags/k-%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 练习题</title>
    <link href="https://lucifer.ren/blog/2020/09/27/ts-exercises/"/>
    <id>https://lucifer.ren/blog/2020/09/27/ts-exercises/</id>
    <published>2020-09-26T16:00:00.000Z</published>
    <updated>2020-10-13T10:08:29.418Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript 的学习资料非常多，其中也不乏很多优秀的文章和教程。但是目前为止没有一个我特别满意的。原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们大多数没有一个清晰的主线，而是按照 API 组织章节的，内容在&lt;strong&gt;逻辑上&lt;/strong&gt;比较零散。&lt;/li&gt;
&lt;li&gt;大多是“讲是什么，怎么用“，而不是”讲为什么，讲原理“。&lt;/li&gt;
&lt;li&gt;大多数内容比较枯燥，趣味性比较低。都是干巴巴的文字，没有图片，缺乏能够引起强烈共鸣的例子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我的想法是做一套不同市面上大多数的 TypeScript 学习教程。以人类认知的角度思考问题，学习 TypeScript，通过通俗易懂的例子和图片来帮助大家建立 TypeScript 世界观。&lt;/p&gt;
&lt;p&gt;系列安排：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/04/ts-internal/&quot;&gt;上帝视角看 TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/15/ts-type-system/&quot;&gt;TypeScript 类型系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/21/ts-type/&quot;&gt;types 和 @types 是什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/06/16/ts-generics/&quot;&gt;你不知道的 TypeScript 泛型（万字长文，建议收藏）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/24/ts-config/&quot;&gt;TypeScript 配置文件该怎么写？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TypeScript 是如何与 React，Vue，Webpack 集成的？&lt;/li&gt;
&lt;li&gt;TypeScript 练习题（就是本文）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目录将来可能会有所调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，我的系列文章基本不会讲 API，因此需要你有一定的 TypeScript 使用基础，推荐两个学习资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jkchao.github.io/typescript-book-chinese/&quot; title=&quot;深入理解 TypeScript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解 TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/home&quot; title=&quot;TypeScript 官方文档&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TypeScript 官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这两个资料和我的系列教程，掌握 TypeScript 指日可待。&lt;/p&gt;
&lt;p&gt;接下来，我们通过几个方面来从宏观的角度来看一下 TypeScript。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lucifer.ren/blog/2020/09/19/generator&amp;iterator/"/>
    <id>https://lucifer.ren/blog/2020/09/19/generator&amp;iterator/</id>
    <published>2020-09-19T06:36:38.225Z</published>
    <updated>2020-09-19T06:44:59.504Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>字节跳动的算法面试题是什么难度？</title>
    <link href="https://lucifer.ren/blog/2020/09/06/byte-dance-algo-ex/"/>
    <id>https://lucifer.ren/blog/2020/09/06/byte-dance-algo-ex/</id>
    <published>2020-09-05T16:00:00.000Z</published>
    <updated>2020-09-06T13:14:52.739Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;由于 lucifer 我是一个小前端， 最近也在准备写一个《前端如何搞定算法面试》的专栏，因此最近没少看各大公司的面试题。都说字节跳动算法题比较难，我就先拿 ta 下手，做了几套 。这次我们就拿一套 &lt;code&gt;2018 年的前端校招（第四批）&lt;/code&gt;来看下字节的算法笔试题的难度几何。地址：&lt;a href=&quot;https://www.nowcoder.com/test/8536639/summary&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/test/8536639/summary&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上，这套字节的前端岗位笔试题和后端以及算法岗位的笔试题也只有一道题目（红包的设计题被换成了另外一个设计题）不一样而已，因此也不需要担心你不是前端，题目类型和难度和你的岗位不匹配。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数组" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/"/>
    
      <category term="滑动窗口" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
      <category term="面试" scheme="https://lucifer.ren/blog/categories/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="字节跳动" scheme="https://lucifer.ren/blog/categories/%E9%9D%A2%E8%AF%95/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="滑动窗口" scheme="https://lucifer.ren/blog/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
      <category term="面试" scheme="https://lucifer.ren/blog/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="字节跳动" scheme="https://lucifer.ren/blog/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动的算法面试题是什么难度？（第二弹）</title>
    <link href="https://lucifer.ren/blog/2020/09/06/byte-dance-algo-ex-2017/"/>
    <id>https://lucifer.ren/blog/2020/09/06/byte-dance-algo-ex-2017/</id>
    <published>2020-09-05T16:00:00.000Z</published>
    <updated>2020-09-14T09:06:58.597Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;由于 lucifer 我是一个小前端， 最近也在准备写一个《前端如何搞定算法面试》的专栏，因此最近没少看各大公司的面试题。都说字节跳动算法题比较难，我就先拿 ta 下手，做了几套 。这次我们就拿一套 &lt;code&gt;字节跳动2017秋招编程题汇总&lt;/code&gt;来看下字节的算法笔试题的难度几何。地址：&lt;a href=&quot;https://www.nowcoder.com/test/6035789/summary&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/test/6035789/summary&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数组" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/"/>
    
      <category term="滑动窗口" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
      <category term="面试" scheme="https://lucifer.ren/blog/categories/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="字节跳动" scheme="https://lucifer.ren/blog/categories/%E9%9D%A2%E8%AF%95/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="滑动窗口" scheme="https://lucifer.ren/blog/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
      <category term="面试" scheme="https://lucifer.ren/blog/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="字节跳动" scheme="https://lucifer.ren/blog/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>用最优雅的方式打开终端</title>
    <link href="https://lucifer.ren/blog/2020/09/03/iterm-window-hotkey/"/>
    <id>https://lucifer.ren/blog/2020/09/03/iterm-window-hotkey/</id>
    <published>2020-09-03T12:15:27.867Z</published>
    <updated>2020-09-03T12:27:49.078Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何快速呼出终端&quot;&gt;&lt;a href=&quot;#如何快速呼出终端&quot; class=&quot;headerlink&quot; title=&quot;如何快速呼出终端&quot;&gt;&lt;/a&gt;如何快速呼出终端&lt;/h2&gt;&lt;p&gt;先看效果：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cdn.jsdelivr.net/gh/azl397985856/cdn/2020-9-3/1599135714685-Kapture%202020-09-03%20at%2019.54.50.mp4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;视频地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gif 太大， 放不了。 放一个 MP4 文件给大家看吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来就教你&lt;strong&gt;随时随地，用最优雅的方式&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://lucifer.ren/blog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://lucifer.ren/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="效率" scheme="https://lucifer.ren/blog/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="命令行" scheme="https://lucifer.ren/blog/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>对《丢鸡蛋问题》的一点补充</title>
    <link href="https://lucifer.ren/blog/2020/08/30/887.super-egg-drop-extension/"/>
    <id>https://lucifer.ren/blog/2020/08/30/887.super-egg-drop-extension/</id>
    <published>2020-08-29T16:00:00.000Z</published>
    <updated>2020-08-30T06:07:32.303Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;​ 去年的一年时间，我在群里每天都会出题给大家做。但是就在 2020-03 开始，力扣也开展了每日一题活动。我突然觉得这个每日一题的必要性变得小了很多，并且逐渐减少了出题频率。但是我还是不愿意放弃大家一起集中进行交流学习的机会。于是我打算新开辟一个专题，这个专题一方面要和力扣官方的每日一题重合度低，另一方面要让大家有参与的热情。&lt;/p&gt;
&lt;p&gt;于是【异议！】系列应运而生。它是个什么东西呢？我相信大家一定在平时刷算法的过程中，一定遇到过“这解法怎么想到的？”，“这解法不对吧？”的情况，并且可悲的是没有人能够回答你。来这里，「力扣加加」 来回答你。我们会对大家提出的问题进行筛选，将有意义的问题开放出来给大家讨论和学习。&lt;/p&gt;
&lt;p&gt;本次给大家带来的/是【异议！】系列「第二弹」。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数组" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://lucifer.ren/blog/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>动态规划问题为什么要画表格？</title>
    <link href="https://lucifer.ren/blog/2020/08/27/91algo-dp-lecture/"/>
    <id>https://lucifer.ren/blog/2020/08/27/91algo-dp-lecture/</id>
    <published>2020-08-27T02:20:26.566Z</published>
    <updated>2020-08-27T02:21:19.135Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是我的 91 算法第一期的部分讲义内容。 91 算法第一期已经接近尾声，二期的具体时间关注我的公众号即可，一旦开放，会第一时间在公众号《力扣加加》通知大家。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动态规划可以理解为是&lt;strong&gt;查表的递归（记忆化）&lt;/strong&gt;。那么什么是递归？什么是查表（记忆化）？&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数组" scheme="https://lucifer.ren/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84/"/>
    
      <category term="动态规划" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="数据结构" scheme="https://lucifer.ren/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://lucifer.ren/blog/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 配置文件该怎么写？</title>
    <link href="https://lucifer.ren/blog/2020/08/24/ts-config/"/>
    <id>https://lucifer.ren/blog/2020/08/24/ts-config/</id>
    <published>2020-08-23T16:00:00.000Z</published>
    <updated>2020-08-25T03:13:58.175Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript 的学习资料非常多，其中也不乏很多优秀的文章和教程。但是目前为止没有一个我特别满意的。原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们大多数没有一个清晰的主线，而是按照 API 组织章节的，内容在&lt;strong&gt;逻辑上&lt;/strong&gt;比较零散。&lt;/li&gt;
&lt;li&gt;大多是“讲是什么，怎么用“，而不是”讲为什么，讲原理“。&lt;/li&gt;
&lt;li&gt;大多数内容比较枯燥，趣味性比较低。都是干巴巴的文字，没有图片，缺乏能够引起强烈共鸣的例子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我的想法是做一套不同市面上大多数的 TypeScript 学习教程。以人类认知的角度思考问题，学习 TypeScript，通过通俗易懂的例子和图片来帮助大家建立 TypeScript 世界观。&lt;/p&gt;
&lt;p&gt;系列安排：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/04/ts-internal/&quot;&gt;上帝视角看 TypeScript（已发布）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/15/ts-type-system/&quot;&gt;TypeScript 类型系统（已发布）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/21/ts-type/&quot;&gt;types 和 @types 是什么？（已发布）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/06/16/ts-generics/&quot;&gt;你不知道的 TypeScript 泛型（万字长文，建议收藏）（已发布）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TypeScript 配置文件该怎么写？（就是本文）&lt;/li&gt;
&lt;li&gt;TypeScript 是如何与 React，Vue，Webpack 集成的？&lt;/li&gt;
&lt;li&gt;TypeScript 练习题&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目录将来可能会有所调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，我的系列文章基本不会讲 API，因此需要你有一定的 TypeScript 使用基础，推荐两个学习资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jkchao.github.io/typescript-book-chinese/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解 TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/home&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这两个资料和我的系列教程，掌握 TypeScript 指日可待。&lt;/p&gt;
&lt;p&gt;接下来，我们通过几个方面来从宏观的角度来看一下 TypeScript。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>types 和 @types 是什么？</title>
    <link href="https://lucifer.ren/blog/2020/08/21/ts-type/"/>
    <id>https://lucifer.ren/blog/2020/08/21/ts-type/</id>
    <published>2020-08-20T16:00:00.000Z</published>
    <updated>2020-08-22T04:07:15.485Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript 的学习资料非常多，其中也不乏很多优秀的文章和教程。但是目前为止没有一个我特别满意的。原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们大多数没有一个清晰的主线，而是按照 API 组织章节的，内容在&lt;strong&gt;&lt;em&gt;逻辑上&lt;/em&gt;&lt;/strong&gt;比较零散。&lt;/li&gt;
&lt;li&gt;大多是“讲是什么，怎么用“，而不是”讲为什么，讲原理“。&lt;/li&gt;
&lt;li&gt;大多数内容比较枯燥，趣味性比较低。都是干巴巴的文字，没有图片，缺乏能够引起强烈共鸣的例子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我的想法是做一套不同市面上大多数的 TypeScript 学习教程。以人类认知的角度思考问题，学习 TypeScript，通过通俗易懂的例子和图片来帮助大家建立 TypeScript 世界观。&lt;/p&gt;
&lt;p&gt;系列安排：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/04/ts-internal/&quot;&gt;上帝视角看 TypeScript（已发布）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/15/ts-type-system/&quot;&gt;TypeScript 类型系统（已发布）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;types 和 @types 是什么？（就是本文）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/06/16/ts-generics/&quot;&gt;你不知道的 TypeScript 泛型（万字长文，建议收藏）&lt;/a&gt;（已发布）&lt;/li&gt;
&lt;li&gt;TypeScript 配置文件该怎么写？&lt;/li&gt;
&lt;li&gt;TypeScript 是如何与 React，Vue，Webpack 集成的？&lt;/li&gt;
&lt;li&gt;TypeScript 练习题&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目录将来可能会有所调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，我的系列文章基本不会讲 API，因此需要你有一定的 TypeScript 使用基础，推荐两个学习资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jkchao.github.io/typescript-book-chinese/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解 TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/home&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这两个资料和我的系列教程，掌握 TypeScript 指日可待。&lt;/p&gt;
&lt;p&gt;接下来，我们通过几个方面来从宏观的角度来看一下 TypeScript。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>力扣刷题插件</title>
    <link href="https://lucifer.ren/blog/2020/08/16/leetcode-cheat/"/>
    <id>https://lucifer.ren/blog/2020/08/16/leetcode-cheat/</id>
    <published>2020-08-16T08:56:49.947Z</published>
    <updated>2020-08-26T05:06:09.396Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前我做了一个视频， 介绍我的刷题浏览器扩展插件，视频地址：&lt;a href=&quot;https://www.bilibili.com/video/BV1UK4y1x7zj/。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1UK4y1x7zj/。&lt;/a&gt; 今天我在上次的基础上增加了部分公司的显示以及优化了若干体验功能。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/categories/LeetCode/"/>
    
      <category term="插件" scheme="https://lucifer.ren/blog/categories/%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="LeetCode" scheme="https://lucifer.ren/blog/tags/LeetCode/"/>
    
      <category term="插件" scheme="https://lucifer.ren/blog/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="刷题" scheme="https://lucifer.ren/blog/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 类型系统</title>
    <link href="https://lucifer.ren/blog/2020/08/15/ts-type-system/"/>
    <id>https://lucifer.ren/blog/2020/08/15/ts-type-system/</id>
    <published>2020-08-14T16:00:00.000Z</published>
    <updated>2020-09-24T07:48:29.039Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript 的学习资料非常多，其中也不乏很多优秀的文章和教程。但是目前为止没有一个我特别满意的。原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们大多数没有一个清晰的主线，而是按照 API 组织章节的，内容在&lt;strong&gt;逻辑上&lt;/strong&gt;比较零散。&lt;/li&gt;
&lt;li&gt;大多是“讲是什么，怎么用“，而不是”讲为什么，讲原理“。&lt;/li&gt;
&lt;li&gt;大多数内容比较枯燥，趣味性比较低。都是干巴巴的文字，没有图片，缺乏能够引起强烈共鸣的例子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我的想法是做一套不同市面上大多数的 TypeScript 学习教程。以人类认知的角度思考问题，学习 TypeScript，通过通俗易懂的例子和图片来帮助大家建立 TypeScript 世界观。&lt;/p&gt;
&lt;p&gt;系列安排：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/08/04/ts-internal/&quot; title=&quot;上帝视角看 TypeScrip&quot;&gt;上帝视角看 TypeScript&lt;/a&gt;（已发布）&lt;/li&gt;
&lt;li&gt;TypeScript 类型系统（就是本文）&lt;/li&gt;
&lt;li&gt;types 和 @types 是什么？&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/06/16/ts-generics/&quot; title=&quot;你不知道的 TypeScript 泛型（万字长文，建议收藏）&quot;&gt;你不知道的 TypeScript 泛型（万字长文，建议收藏）&lt;/a&gt;（已发布）&lt;/li&gt;
&lt;li&gt;TypeScript 配置文件该怎么写？&lt;/li&gt;
&lt;li&gt;TypeScript 是如何与 React，Vue，Webpack 集成的？&lt;/li&gt;
&lt;li&gt;TypeScript 练习题&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目录将来可能会有所调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，我的系列文章基本不会讲 API，因此需要你有一定的 TypeScript 使用基础，推荐两个学习资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jkchao.github.io/typescript-book-chinese/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解 TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/home&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这两个资料和我的系列教程，掌握 TypeScript 指日可待。&lt;/p&gt;
&lt;p&gt;接下来，我们通过几个方面来从宏观的角度来看一下 TypeScript。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>提前批算法工程师面试之路</title>
    <link href="https://lucifer.ren/blog/2020/08/13/interview-log-tqp/"/>
    <id>https://lucifer.ren/blog/2020/08/13/interview-log-tqp/</id>
    <published>2020-08-13T02:12:17.419Z</published>
    <updated>2020-08-13T02:13:27.876Z</updated>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;作者：宝石&lt;/li&gt;
&lt;li&gt;校对&amp;amp;整理：lucifer&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面经" scheme="https://lucifer.ren/blog/categories/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="校招" scheme="https://lucifer.ren/blog/categories/%E6%A0%A1%E6%8B%9B/"/>
    
      <category term="百度" scheme="https://lucifer.ren/blog/categories/%E7%99%BE%E5%BA%A6/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面经" scheme="https://lucifer.ren/blog/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="校招" scheme="https://lucifer.ren/blog/tags/%E6%A0%A1%E6%8B%9B/"/>
    
      <category term="百度" scheme="https://lucifer.ren/blog/tags/%E7%99%BE%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Webkit 内核初探</title>
    <link href="https://lucifer.ren/blog/2020/08/11/webkit-intro/"/>
    <id>https://lucifer.ren/blog/2020/08/11/webkit-intro/</id>
    <published>2020-08-10T16:00:00.000Z</published>
    <updated>2020-08-11T06:40:39.406Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;作者: 阿吉&lt;br&gt;校对&amp;amp;整理: lucifer&lt;/p&gt;
&lt;p&gt;当下浏览器内核主要有 Webkit、Blink 等。本文分析注意是自 2001 年 Webkit 从 KHTML 分离出去并开源后，各大浏览器厂商魔改 Webkit 的时期，这些魔改的内核最终以 Chromium 受众最多而脱颖而出。本文就以 Chromium 浏览器架构为基础，逐层探入进行剖析。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="https://lucifer.ren/blog/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="浏览器" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="webkit" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/webkit/"/>
    
      <category term="webkit" scheme="https://lucifer.ren/blog/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/webkit/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="https://lucifer.ren/blog/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="webkit" scheme="https://lucifer.ren/blog/tags/webkit/"/>
    
  </entry>
  
  <entry>
    <title>好未来-北京-视频面试</title>
    <link href="https://lucifer.ren/blog/2020/08/09/interview-log-haoweilai/"/>
    <id>https://lucifer.ren/blog/2020/08/09/interview-log-haoweilai/</id>
    <published>2020-08-09T02:46:33.410Z</published>
    <updated>2020-08-09T03:25:22.406Z</updated>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;作者：阿吉&lt;/li&gt;
&lt;li&gt;整理&amp;amp;点评：lucifer&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面经" scheme="https://lucifer.ren/blog/categories/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="校招" scheme="https://lucifer.ren/blog/categories/%E6%A0%A1%E6%8B%9B/"/>
    
      <category term="好未来" scheme="https://lucifer.ren/blog/categories/%E5%A5%BD%E6%9C%AA%E6%9D%A5/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面经" scheme="https://lucifer.ren/blog/tags/%E9%9D%A2%E7%BB%8F/"/>
    
      <category term="校招" scheme="https://lucifer.ren/blog/tags/%E6%A0%A1%E6%8B%9B/"/>
    
      <category term="好未来" scheme="https://lucifer.ren/blog/tags/%E5%A5%BD%E6%9C%AA%E6%9D%A5/"/>
    
  </entry>
  
  <entry>
    <title>上帝视角看 TypeScript</title>
    <link href="https://lucifer.ren/blog/2020/08/04/ts-internal/"/>
    <id>https://lucifer.ren/blog/2020/08/04/ts-internal/</id>
    <published>2020-08-04T03:55:11.375Z</published>
    <updated>2020-08-04T03:55:47.660Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript 的学习资料非常多，其中也不乏很多优秀的文章和教程。但是目前为止没有一个我特别满意的。原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们大多数没有一个清晰的主线，而是按照 API 组织章节的，内容在&lt;strong&gt;逻辑上&lt;/strong&gt;比较零散。&lt;/li&gt;
&lt;li&gt;大多是“讲是什么，怎么用“，而不是”讲为什么，讲原理“。&lt;/li&gt;
&lt;li&gt;大多数内容比较枯燥，趣味性比较低。都是干巴巴的文字，没有图片，缺乏能够引起强烈共鸣的例子。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我的想法是做一套不同市面上大多数的 TypeScript 学习教程。以人类认知的角度思考问题，学习 TypeScript，通过通俗易懂的例子和图片来帮助大家建立 TypeScript 世界观。 而本篇文章则是这个系列的开篇。&lt;/p&gt;
&lt;p&gt;系列安排：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上帝视角看 TypeScript（就是本文）&lt;/li&gt;
&lt;li&gt;TypeScript 类型系统&lt;/li&gt;
&lt;li&gt;什么是 types？什么是 @types？&lt;/li&gt;
&lt;li&gt;类型推导， 类型断言与类型保护&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lucifer.ren/blog/2020/06/16/ts-generics/&quot;&gt;你不知道的 TypeScript 泛型（万字长文，建议收藏）&lt;/a&gt;（已发布）&lt;/li&gt;
&lt;li&gt;TypeScript 练习题&lt;/li&gt;
&lt;li&gt;TypeScript 配置文件该怎么写？&lt;/li&gt;
&lt;li&gt;TypeScript 是如何与 React，Vue，Webpack 集成的？&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目录将来可能会有所调整。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意，我的系列文章基本不会讲 API，因此需要你有一定的 TypeScript 使用基础，推荐两个学习资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jkchao.github.io/typescript-book-chinese/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解 TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/home&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这两个资料和我的系列教程，掌握 TypeScript 指日可待。&lt;/p&gt;
&lt;p&gt;接下来，我们通过几个方面来从宏观的角度来看一下 TypeScript。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
      <category term="泛型" scheme="https://lucifer.ren/blog/categories/%E5%89%8D%E7%AB%AF/TypeScript/%E6%B3%9B%E5%9E%8B/"/>
    
    
      <category term="前端" scheme="https://lucifer.ren/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="TypeScript" scheme="https://lucifer.ren/blog/tags/TypeScript/"/>
    
      <category term="泛型" scheme="https://lucifer.ren/blog/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>《我是你的妈妈呀》 - 第一期</title>
    <link href="https://lucifer.ren/blog/2020/08/03/mother-01/"/>
    <id>https://lucifer.ren/blog/2020/08/03/mother-01/</id>
    <published>2020-08-02T16:00:00.000Z</published>
    <updated>2020-10-07T11:29:14.785Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;记得我初中的时候，学校发的一个小册子的名字就是母题啥的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1ghbhlyhaadj308c08c3yv.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;大概意思是市面上的题（尤其是中考题）都是这些母题生的，都是它们的儿子。&lt;/p&gt;
&lt;p&gt;熟悉我的朋友应该知道，我有一个风格：”喜欢用通俗易懂的语言以及图片，还原解题过程“。包括我是如何抽象的，如何与其他题目建立联系的等。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters/solution/yi-zhao-chi-bian-li-kou-si-dao-ti-ma-ma-zai-ye-b-6/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一招吃遍力扣四道题，妈妈再也不用担心我被套路啦～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/wildcard-matching/solution/chao-ji-xiang-xi-ji-yi-hua-di-gui-tu-jie-dai-ni-yi/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;超级详细记忆化递归，图解，带你一次攻克三道 Hard 套路题（44. 通配符匹配）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/solution/chuan-shang-yi-fu-wo-jiu-bu-ren-shi-ni-liao-lai-3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;穿上衣服我就不认识你了？来聊聊最长上升子序列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/integer-break/solution/ba-yi-ba-zhe-chong-ti-de-wai-tao-343-zheng-shu-cha/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;扒一扒这种题的外套（343. 整数拆分）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果把这个思考过程称之为自顶向下的话，那么实际上能写出来取决于你：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否有良好的抽象能力&lt;/li&gt;
&lt;li&gt;是否有足够的基础知识&lt;/li&gt;
&lt;li&gt;是否能与学过的基础知识建立联系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果反着呢? 我先把所有抽象之后的纯粹的东西掌握，也就是母题。那么遇到新的题，我就往上套呗？这就是我在《LeetCode 题解仓库》中所说的&lt;strong&gt;只有熟练掌握基础的数据结构与算法，才能对复杂问题迎刃有余。&lt;/strong&gt; 这种思路就是&lt;strong&gt;自底向上&lt;/strong&gt;。（有点像动态规划?） 市面上的题那么多，但是题目类型就是那几种。甚至出题人出题的时候都是根据以前的题目变个条件，变个说法从而搞出一个“新”的题。&lt;/p&gt;
&lt;p&gt;这个专题的目标就是从反的方向来，我们先学习和记忆底层的被抽象过的经典的题目。遇到新的题目，就往这些母题上套即可。&lt;/p&gt;
&lt;p&gt;那让我们来自底向上看下第一期的这八道母题吧~&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="母题" scheme="https://lucifer.ren/blog/categories/%E7%AE%97%E6%B3%95/%E6%AF%8D%E9%A2%98/"/>
    
    
      <category term="算法" scheme="https://lucifer.ren/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="母题" scheme="https://lucifer.ren/blog/tags/%E6%AF%8D%E9%A2%98/"/>
    
  </entry>
  
</feed>
